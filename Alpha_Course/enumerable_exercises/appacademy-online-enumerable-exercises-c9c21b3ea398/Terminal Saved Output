Last login: Mon Sep 24 20:20:42 on ttys000
Neros-MacBook-Air:appacademy-online-rspec-3-3b381c415b48 nerochan25$ bundle exec rspec --color
...FF.FF..FFFFFFFF...FFFFFFFF.FFF

Failures:

  1) Array#square does nothing to an empty array
     Failure/Error: expect([].square).to eq([])
       
       expected: []
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:20:in `block (3 levels) in <top (required)>'

  2) Array#square returns a new array containing the squares of each element
     Failure/Error: expect([1,2,3].square).to eq([1,4,9])
       
       expected: [1, 4, 9]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:24:in `block (3 levels) in <top (required)>'

  3) Array#square! squares each element of the original array
     Failure/Error: expect(array).to eq([1,4,9])
       
       expected: [1, 4, 9]
            got: [1, 2, 3]
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:41:in `block (3 levels) in <top (required)>'

  4) Array#my_uniq returns the unique elements
     Failure/Error: expect(array.my_uniq).to eq([1, 2, 3, 4])
       
       expected: [1, 2, 3, 4]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:49:in `block (3 levels) in <top (required)>'

  5) Array#two_sum returns positions of pairs of numbers that add to zero
     Failure/Error: expect([5, 1, -7, -5].two_sum).to eq([[0, 3]])
       
       expected: [[0, 3]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:69:in `block (3 levels) in <top (required)>'

  6) Array#two_sum finds multiple pairs
     Failure/Error: expect([5, -1, -5, 1].two_sum).to eq([[0, 2], [1, 3]])
       
       expected: [[0, 2], [1, 3]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:73:in `block (3 levels) in <top (required)>'

  7) Array#two_sum finds pairs with same element
     Failure/Error: expect([5, -5, -5].two_sum).to eq([[0, 1], [0, 2]])
       
       expected: [[0, 1], [0, 2]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:77:in `block (3 levels) in <top (required)>'

  8) Array#two_sum returns [] when no pair is found
     Failure/Error: expect([5, 5, 3, 1].two_sum).to eq([])
       
       expected: []
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:81:in `block (3 levels) in <top (required)>'

  9) Array#two_sum won't find spurious zero pairs
     Failure/Error: expect([0, 1, 2, 3].two_sum).to eq([])
       
       expected: []
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:85:in `block (3 levels) in <top (required)>'

  10) Array#two_sum will find real zero pairs
     Failure/Error: expect([0, 1, 2, 0].two_sum).to eq([[0, 3]])
       
       expected: [[0, 3]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:89:in `block (3 levels) in <top (required)>'

  11) Array#my_transpose transposes a small matrix
     Failure/Error: expect(small_arr.my_transpose).to eq([
       
       expected: [[1, 3], [2, 4]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:106:in `block (3 levels) in <top (required)>'

  12) Array#my_transpose transposes a larger matrix
     Failure/Error: expect(arr.my_transpose).to eq([
       
       expected: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:113:in `block (3 levels) in <top (required)>'

  13) Array#median returns the element for an array of length 1
     Failure/Error: expect([1].median).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:145:in `block (3 levels) in <top (required)>'

  14) Array#median returns the median of an odd-length array
     Failure/Error: expect(odd_array.median).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:149:in `block (3 levels) in <top (required)>'

  15) Array#median returns the median of an even-length array
     Failure/Error: expect(even_array.median).to eq(4.5)
       
       expected: 4.5
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:153:in `block (3 levels) in <top (required)>'

  16) String#caesar encodes a simple word
     Failure/Error: expect("aaa".caesar(11)).to eq("lll")
       
       expected: "lll"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:7:in `block (3 levels) in <top (required)>'

  17) String#caesar wraps around
     Failure/Error: expect("zzz".caesar(1)).to eq("aaa")
       
       expected: "aaa"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:11:in `block (3 levels) in <top (required)>'

  18) String#caesar encodes a longer word
     Failure/Error: expect("catzhatz".caesar(2)).to eq("ecvbjcvb")
       
       expected: "ecvbjcvb"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:15:in `block (3 levels) in <top (required)>'

  19) Hash#difference returns the difference of non-overlapping hashes
     Failure/Error: expect(hash.difference(non_overlapping_hash)).to eq({
       
       expected: {:a=>1, :b=>2, :c=>3, :d=>4}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:27:in `block (3 levels) in <top (required)>'

  20) Hash#difference returns the difference of overlapping hashes
     Failure/Error: expect(hash.difference(overlapping_hash)).to eq({
       
       expected: {:a=>1, :c=>3}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:36:in `block (3 levels) in <top (required)>'

  21) Fixnum#stringify stringifies numbers in base 10
     Failure/Error: expect(5.stringify(10)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:57:in `block (3 levels) in <top (required)>'

  22) Fixnum#stringify stringifies numbers in base 2
     Failure/Error: expect(5.stringify(2)).to eq("101")
       
       expected: "101"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:63:in `block (3 levels) in <top (required)>'

  23) Fixnum#stringify stringifies numbers in base 16
     Failure/Error: expect(5.stringify(16)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:69:in `block (3 levels) in <top (required)>'

Finished in 0.03231 seconds (files took 0.2866 seconds to load)
33 examples, 23 failures

Failed examples:

rspec ./spec/00_array_extensions_spec.rb:19 # Array#square does nothing to an empty array
rspec ./spec/00_array_extensions_spec.rb:23 # Array#square returns a new array containing the squares of each element
rspec ./spec/00_array_extensions_spec.rb:38 # Array#square! squares each element of the original array
rspec ./spec/00_array_extensions_spec.rb:48 # Array#my_uniq returns the unique elements
rspec ./spec/00_array_extensions_spec.rb:68 # Array#two_sum returns positions of pairs of numbers that add to zero
rspec ./spec/00_array_extensions_spec.rb:72 # Array#two_sum finds multiple pairs
rspec ./spec/00_array_extensions_spec.rb:76 # Array#two_sum finds pairs with same element
rspec ./spec/00_array_extensions_spec.rb:80 # Array#two_sum returns [] when no pair is found
rspec ./spec/00_array_extensions_spec.rb:84 # Array#two_sum won't find spurious zero pairs
rspec ./spec/00_array_extensions_spec.rb:88 # Array#two_sum will find real zero pairs
rspec ./spec/00_array_extensions_spec.rb:105 # Array#my_transpose transposes a small matrix
rspec ./spec/00_array_extensions_spec.rb:112 # Array#my_transpose transposes a larger matrix
rspec ./spec/00_array_extensions_spec.rb:144 # Array#median returns the element for an array of length 1
rspec ./spec/00_array_extensions_spec.rb:148 # Array#median returns the median of an odd-length array
rspec ./spec/00_array_extensions_spec.rb:152 # Array#median returns the median of an even-length array
rspec ./spec/01_class_extensions_spec.rb:6 # String#caesar encodes a simple word
rspec ./spec/01_class_extensions_spec.rb:10 # String#caesar wraps around
rspec ./spec/01_class_extensions_spec.rb:14 # String#caesar encodes a longer word
rspec ./spec/01_class_extensions_spec.rb:26 # Hash#difference returns the difference of non-overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:35 # Hash#difference returns the difference of overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:56 # Fixnum#stringify stringifies numbers in base 10
rspec ./spec/01_class_extensions_spec.rb:62 # Fixnum#stringify stringifies numbers in base 2
rspec ./spec/01_class_extensions_spec.rb:68 # Fixnum#stringify stringifies numbers in base 16

Neros-MacBook-Air:appacademy-online-rspec-3-3b381c415b48 nerochan25$ atom .
-bash: atom: command not found
Neros-MacBook-Air:appacademy-online-rspec-3-3b381c415b48 nerochan25$ atom .
Neros-MacBook-Air:appacademy-online-rspec-3-3b381c415b48 nerochan25$ bundle exec rspec --color
.....FFF..FFFFFFFF...FFFFFFFF.FFF

Failures:

  1) Array#square does not modify the original array
     Failure/Error: expect(arr).to eq(arr_dup)
       
       expected: [1, 2, 3]
            got: [1, 4, 9]
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:33:in `block (3 levels) in <top (required)>'

  2) Array#square! squares each element of the original array
     Failure/Error: expect(array).to eq([1,4,9])
       
       expected: [1, 4, 9]
            got: [1, 2, 3]
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:41:in `block (3 levels) in <top (required)>'

  3) Array#my_uniq returns the unique elements
     Failure/Error: expect(array.my_uniq).to eq([1, 2, 3, 4])
       
       expected: [1, 2, 3, 4]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:49:in `block (3 levels) in <top (required)>'

  4) Array#two_sum returns positions of pairs of numbers that add to zero
     Failure/Error: expect([5, 1, -7, -5].two_sum).to eq([[0, 3]])
       
       expected: [[0, 3]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Array#two_sum finds multiple pairs
     Failure/Error: expect([5, -1, -5, 1].two_sum).to eq([[0, 2], [1, 3]])
       
       expected: [[0, 2], [1, 3]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:73:in `block (3 levels) in <top (required)>'

  6) Array#two_sum finds pairs with same element
     Failure/Error: expect([5, -5, -5].two_sum).to eq([[0, 1], [0, 2]])
       
       expected: [[0, 1], [0, 2]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:77:in `block (3 levels) in <top (required)>'

  7) Array#two_sum returns [] when no pair is found
     Failure/Error: expect([5, 5, 3, 1].two_sum).to eq([])
       
       expected: []
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:81:in `block (3 levels) in <top (required)>'

  8) Array#two_sum won't find spurious zero pairs
     Failure/Error: expect([0, 1, 2, 3].two_sum).to eq([])
       
       expected: []
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:85:in `block (3 levels) in <top (required)>'

  9) Array#two_sum will find real zero pairs
     Failure/Error: expect([0, 1, 2, 0].two_sum).to eq([[0, 3]])
       
       expected: [[0, 3]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:89:in `block (3 levels) in <top (required)>'

  10) Array#my_transpose transposes a small matrix
     Failure/Error: expect(small_arr.my_transpose).to eq([
       
       expected: [[1, 3], [2, 4]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:106:in `block (3 levels) in <top (required)>'

  11) Array#my_transpose transposes a larger matrix
     Failure/Error: expect(arr.my_transpose).to eq([
       
       expected: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:113:in `block (3 levels) in <top (required)>'

  12) Array#median returns the element for an array of length 1
     Failure/Error: expect([1].median).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:145:in `block (3 levels) in <top (required)>'

  13) Array#median returns the median of an odd-length array
     Failure/Error: expect(odd_array.median).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:149:in `block (3 levels) in <top (required)>'

  14) Array#median returns the median of an even-length array
     Failure/Error: expect(even_array.median).to eq(4.5)
       
       expected: 4.5
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:153:in `block (3 levels) in <top (required)>'

  15) String#caesar encodes a simple word
     Failure/Error: expect("aaa".caesar(11)).to eq("lll")
       
       expected: "lll"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:7:in `block (3 levels) in <top (required)>'

  16) String#caesar wraps around
     Failure/Error: expect("zzz".caesar(1)).to eq("aaa")
       
       expected: "aaa"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:11:in `block (3 levels) in <top (required)>'

  17) String#caesar encodes a longer word
     Failure/Error: expect("catzhatz".caesar(2)).to eq("ecvbjcvb")
       
       expected: "ecvbjcvb"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:15:in `block (3 levels) in <top (required)>'

  18) Hash#difference returns the difference of non-overlapping hashes
     Failure/Error: expect(hash.difference(non_overlapping_hash)).to eq({
       
       expected: {:a=>1, :b=>2, :c=>3, :d=>4}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:27:in `block (3 levels) in <top (required)>'

  19) Hash#difference returns the difference of overlapping hashes
     Failure/Error: expect(hash.difference(overlapping_hash)).to eq({
       
       expected: {:a=>1, :c=>3}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:36:in `block (3 levels) in <top (required)>'

  20) Fixnum#stringify stringifies numbers in base 10
     Failure/Error: expect(5.stringify(10)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:57:in `block (3 levels) in <top (required)>'

  21) Fixnum#stringify stringifies numbers in base 2
     Failure/Error: expect(5.stringify(2)).to eq("101")
       
       expected: "101"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:63:in `block (3 levels) in <top (required)>'

  22) Fixnum#stringify stringifies numbers in base 16
     Failure/Error: expect(5.stringify(16)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:69:in `block (3 levels) in <top (required)>'

Finished in 0.02798 seconds (files took 0.20807 seconds to load)
33 examples, 22 failures

Failed examples:

rspec ./spec/00_array_extensions_spec.rb:27 # Array#square does not modify the original array
rspec ./spec/00_array_extensions_spec.rb:38 # Array#square! squares each element of the original array
rspec ./spec/00_array_extensions_spec.rb:48 # Array#my_uniq returns the unique elements
rspec ./spec/00_array_extensions_spec.rb:68 # Array#two_sum returns positions of pairs of numbers that add to zero
rspec ./spec/00_array_extensions_spec.rb:72 # Array#two_sum finds multiple pairs
rspec ./spec/00_array_extensions_spec.rb:76 # Array#two_sum finds pairs with same element
rspec ./spec/00_array_extensions_spec.rb:80 # Array#two_sum returns [] when no pair is found
rspec ./spec/00_array_extensions_spec.rb:84 # Array#two_sum won't find spurious zero pairs
rspec ./spec/00_array_extensions_spec.rb:88 # Array#two_sum will find real zero pairs
rspec ./spec/00_array_extensions_spec.rb:105 # Array#my_transpose transposes a small matrix
rspec ./spec/00_array_extensions_spec.rb:112 # Array#my_transpose transposes a larger matrix
rspec ./spec/00_array_extensions_spec.rb:144 # Array#median returns the element for an array of length 1
rspec ./spec/00_array_extensions_spec.rb:148 # Array#median returns the median of an odd-length array
rspec ./spec/00_array_extensions_spec.rb:152 # Array#median returns the median of an even-length array
rspec ./spec/01_class_extensions_spec.rb:6 # String#caesar encodes a simple word
rspec ./spec/01_class_extensions_spec.rb:10 # String#caesar wraps around
rspec ./spec/01_class_extensions_spec.rb:14 # String#caesar encodes a longer word
rspec ./spec/01_class_extensions_spec.rb:26 # Hash#difference returns the difference of non-overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:35 # Hash#difference returns the difference of overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:56 # Fixnum#stringify stringifies numbers in base 10
rspec ./spec/01_class_extensions_spec.rb:62 # Fixnum#stringify stringifies numbers in base 2
rspec ./spec/01_class_extensions_spec.rb:68 # Fixnum#stringify stringifies numbers in base 16

Neros-MacBook-Air:appacademy-online-rspec-3-3b381c415b48 nerochan25$ bundle exec rspec --color
.......F..FFFFFFFF...FFFFFFFF.FFF

Failures:

  1) Array#my_uniq returns the unique elements
     Failure/Error: expect(array.my_uniq).to eq([1, 2, 3, 4])
       
       expected: [1, 2, 3, 4]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:49:in `block (3 levels) in <top (required)>'

  2) Array#two_sum returns positions of pairs of numbers that add to zero
     Failure/Error: expect([5, 1, -7, -5].two_sum).to eq([[0, 3]])
       
       expected: [[0, 3]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:69:in `block (3 levels) in <top (required)>'

  3) Array#two_sum finds multiple pairs
     Failure/Error: expect([5, -1, -5, 1].two_sum).to eq([[0, 2], [1, 3]])
       
       expected: [[0, 2], [1, 3]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:73:in `block (3 levels) in <top (required)>'

  4) Array#two_sum finds pairs with same element
     Failure/Error: expect([5, -5, -5].two_sum).to eq([[0, 1], [0, 2]])
       
       expected: [[0, 1], [0, 2]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:77:in `block (3 levels) in <top (required)>'

  5) Array#two_sum returns [] when no pair is found
     Failure/Error: expect([5, 5, 3, 1].two_sum).to eq([])
       
       expected: []
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:81:in `block (3 levels) in <top (required)>'

  6) Array#two_sum won't find spurious zero pairs
     Failure/Error: expect([0, 1, 2, 3].two_sum).to eq([])
       
       expected: []
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:85:in `block (3 levels) in <top (required)>'

  7) Array#two_sum will find real zero pairs
     Failure/Error: expect([0, 1, 2, 0].two_sum).to eq([[0, 3]])
       
       expected: [[0, 3]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:89:in `block (3 levels) in <top (required)>'

  8) Array#my_transpose transposes a small matrix
     Failure/Error: expect(small_arr.my_transpose).to eq([
       
       expected: [[1, 3], [2, 4]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:106:in `block (3 levels) in <top (required)>'

  9) Array#my_transpose transposes a larger matrix
     Failure/Error: expect(arr.my_transpose).to eq([
       
       expected: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:113:in `block (3 levels) in <top (required)>'

  10) Array#median returns the element for an array of length 1
     Failure/Error: expect([1].median).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:145:in `block (3 levels) in <top (required)>'

  11) Array#median returns the median of an odd-length array
     Failure/Error: expect(odd_array.median).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:149:in `block (3 levels) in <top (required)>'

  12) Array#median returns the median of an even-length array
     Failure/Error: expect(even_array.median).to eq(4.5)
       
       expected: 4.5
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:153:in `block (3 levels) in <top (required)>'

  13) String#caesar encodes a simple word
     Failure/Error: expect("aaa".caesar(11)).to eq("lll")
       
       expected: "lll"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:7:in `block (3 levels) in <top (required)>'

  14) String#caesar wraps around
     Failure/Error: expect("zzz".caesar(1)).to eq("aaa")
       
       expected: "aaa"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:11:in `block (3 levels) in <top (required)>'

  15) String#caesar encodes a longer word
     Failure/Error: expect("catzhatz".caesar(2)).to eq("ecvbjcvb")
       
       expected: "ecvbjcvb"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:15:in `block (3 levels) in <top (required)>'

  16) Hash#difference returns the difference of non-overlapping hashes
     Failure/Error: expect(hash.difference(non_overlapping_hash)).to eq({
       
       expected: {:a=>1, :b=>2, :c=>3, :d=>4}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:27:in `block (3 levels) in <top (required)>'

  17) Hash#difference returns the difference of overlapping hashes
     Failure/Error: expect(hash.difference(overlapping_hash)).to eq({
       
       expected: {:a=>1, :c=>3}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:36:in `block (3 levels) in <top (required)>'

  18) Fixnum#stringify stringifies numbers in base 10
     Failure/Error: expect(5.stringify(10)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:57:in `block (3 levels) in <top (required)>'

  19) Fixnum#stringify stringifies numbers in base 2
     Failure/Error: expect(5.stringify(2)).to eq("101")
       
       expected: "101"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:63:in `block (3 levels) in <top (required)>'

  20) Fixnum#stringify stringifies numbers in base 16
     Failure/Error: expect(5.stringify(16)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:69:in `block (3 levels) in <top (required)>'

Finished in 0.0273 seconds (files took 0.18239 seconds to load)
33 examples, 20 failures

Failed examples:

rspec ./spec/00_array_extensions_spec.rb:48 # Array#my_uniq returns the unique elements
rspec ./spec/00_array_extensions_spec.rb:68 # Array#two_sum returns positions of pairs of numbers that add to zero
rspec ./spec/00_array_extensions_spec.rb:72 # Array#two_sum finds multiple pairs
rspec ./spec/00_array_extensions_spec.rb:76 # Array#two_sum finds pairs with same element
rspec ./spec/00_array_extensions_spec.rb:80 # Array#two_sum returns [] when no pair is found
rspec ./spec/00_array_extensions_spec.rb:84 # Array#two_sum won't find spurious zero pairs
rspec ./spec/00_array_extensions_spec.rb:88 # Array#two_sum will find real zero pairs
rspec ./spec/00_array_extensions_spec.rb:105 # Array#my_transpose transposes a small matrix
rspec ./spec/00_array_extensions_spec.rb:112 # Array#my_transpose transposes a larger matrix
rspec ./spec/00_array_extensions_spec.rb:144 # Array#median returns the element for an array of length 1
rspec ./spec/00_array_extensions_spec.rb:148 # Array#median returns the median of an odd-length array
rspec ./spec/00_array_extensions_spec.rb:152 # Array#median returns the median of an even-length array
rspec ./spec/01_class_extensions_spec.rb:6 # String#caesar encodes a simple word
rspec ./spec/01_class_extensions_spec.rb:10 # String#caesar wraps around
rspec ./spec/01_class_extensions_spec.rb:14 # String#caesar encodes a longer word
rspec ./spec/01_class_extensions_spec.rb:26 # Hash#difference returns the difference of non-overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:35 # Hash#difference returns the difference of overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:56 # Fixnum#stringify stringifies numbers in base 10
rspec ./spec/01_class_extensions_spec.rb:62 # Fixnum#stringify stringifies numbers in base 2
rspec ./spec/01_class_extensions_spec.rb:68 # Fixnum#stringify stringifies numbers in base 16

Neros-MacBook-Air:appacademy-online-rspec-3-3b381c415b48 nerochan25$ bundle exec rspec --color
..........FFFFFFFF...FFFFFFFF.FFF

Failures:

  1) Array#two_sum returns positions of pairs of numbers that add to zero
     Failure/Error: expect([5, 1, -7, -5].two_sum).to eq([[0, 3]])
       
       expected: [[0, 3]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:69:in `block (3 levels) in <top (required)>'

  2) Array#two_sum finds multiple pairs
     Failure/Error: expect([5, -1, -5, 1].two_sum).to eq([[0, 2], [1, 3]])
       
       expected: [[0, 2], [1, 3]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:73:in `block (3 levels) in <top (required)>'

  3) Array#two_sum finds pairs with same element
     Failure/Error: expect([5, -5, -5].two_sum).to eq([[0, 1], [0, 2]])
       
       expected: [[0, 1], [0, 2]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:77:in `block (3 levels) in <top (required)>'

  4) Array#two_sum returns [] when no pair is found
     Failure/Error: expect([5, 5, 3, 1].two_sum).to eq([])
       
       expected: []
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:81:in `block (3 levels) in <top (required)>'

  5) Array#two_sum won't find spurious zero pairs
     Failure/Error: expect([0, 1, 2, 3].two_sum).to eq([])
       
       expected: []
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:85:in `block (3 levels) in <top (required)>'

  6) Array#two_sum will find real zero pairs
     Failure/Error: expect([0, 1, 2, 0].two_sum).to eq([[0, 3]])
       
       expected: [[0, 3]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:89:in `block (3 levels) in <top (required)>'

  7) Array#my_transpose transposes a small matrix
     Failure/Error: expect(small_arr.my_transpose).to eq([
       
       expected: [[1, 3], [2, 4]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:106:in `block (3 levels) in <top (required)>'

  8) Array#my_transpose transposes a larger matrix
     Failure/Error: expect(arr.my_transpose).to eq([
       
       expected: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:113:in `block (3 levels) in <top (required)>'

  9) Array#median returns the element for an array of length 1
     Failure/Error: expect([1].median).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:145:in `block (3 levels) in <top (required)>'

  10) Array#median returns the median of an odd-length array
     Failure/Error: expect(odd_array.median).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:149:in `block (3 levels) in <top (required)>'

  11) Array#median returns the median of an even-length array
     Failure/Error: expect(even_array.median).to eq(4.5)
       
       expected: 4.5
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:153:in `block (3 levels) in <top (required)>'

  12) String#caesar encodes a simple word
     Failure/Error: expect("aaa".caesar(11)).to eq("lll")
       
       expected: "lll"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:7:in `block (3 levels) in <top (required)>'

  13) String#caesar wraps around
     Failure/Error: expect("zzz".caesar(1)).to eq("aaa")
       
       expected: "aaa"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:11:in `block (3 levels) in <top (required)>'

  14) String#caesar encodes a longer word
     Failure/Error: expect("catzhatz".caesar(2)).to eq("ecvbjcvb")
       
       expected: "ecvbjcvb"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:15:in `block (3 levels) in <top (required)>'

  15) Hash#difference returns the difference of non-overlapping hashes
     Failure/Error: expect(hash.difference(non_overlapping_hash)).to eq({
       
       expected: {:a=>1, :b=>2, :c=>3, :d=>4}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:27:in `block (3 levels) in <top (required)>'

  16) Hash#difference returns the difference of overlapping hashes
     Failure/Error: expect(hash.difference(overlapping_hash)).to eq({
       
       expected: {:a=>1, :c=>3}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:36:in `block (3 levels) in <top (required)>'

  17) Fixnum#stringify stringifies numbers in base 10
     Failure/Error: expect(5.stringify(10)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:57:in `block (3 levels) in <top (required)>'

  18) Fixnum#stringify stringifies numbers in base 2
     Failure/Error: expect(5.stringify(2)).to eq("101")
       
       expected: "101"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Fixnum#stringify stringifies numbers in base 16
     Failure/Error: expect(5.stringify(16)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:69:in `block (3 levels) in <top (required)>'

Finished in 0.02784 seconds (files took 0.18443 seconds to load)
33 examples, 19 failures

Failed examples:

rspec ./spec/00_array_extensions_spec.rb:68 # Array#two_sum returns positions of pairs of numbers that add to zero
rspec ./spec/00_array_extensions_spec.rb:72 # Array#two_sum finds multiple pairs
rspec ./spec/00_array_extensions_spec.rb:76 # Array#two_sum finds pairs with same element
rspec ./spec/00_array_extensions_spec.rb:80 # Array#two_sum returns [] when no pair is found
rspec ./spec/00_array_extensions_spec.rb:84 # Array#two_sum won't find spurious zero pairs
rspec ./spec/00_array_extensions_spec.rb:88 # Array#two_sum will find real zero pairs
rspec ./spec/00_array_extensions_spec.rb:105 # Array#my_transpose transposes a small matrix
rspec ./spec/00_array_extensions_spec.rb:112 # Array#my_transpose transposes a larger matrix
rspec ./spec/00_array_extensions_spec.rb:144 # Array#median returns the element for an array of length 1
rspec ./spec/00_array_extensions_spec.rb:148 # Array#median returns the median of an odd-length array
rspec ./spec/00_array_extensions_spec.rb:152 # Array#median returns the median of an even-length array
rspec ./spec/01_class_extensions_spec.rb:6 # String#caesar encodes a simple word
rspec ./spec/01_class_extensions_spec.rb:10 # String#caesar wraps around
rspec ./spec/01_class_extensions_spec.rb:14 # String#caesar encodes a longer word
rspec ./spec/01_class_extensions_spec.rb:26 # Hash#difference returns the difference of non-overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:35 # Hash#difference returns the difference of overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:56 # Fixnum#stringify stringifies numbers in base 10
rspec ./spec/01_class_extensions_spec.rb:62 # Fixnum#stringify stringifies numbers in base 2
rspec ./spec/01_class_extensions_spec.rb:68 # Fixnum#stringify stringifies numbers in base 16

Neros-MacBook-Air:appacademy-online-rspec-3-3b381c415b48 nerochan25$ bundle exec rspec --color
................FF...FFFFFFFF.FFF

Failures:

  1) Array#my_transpose transposes a small matrix
     Failure/Error: expect(small_arr.my_transpose).to eq([
       
       expected: [[1, 3], [2, 4]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:106:in `block (3 levels) in <top (required)>'

  2) Array#my_transpose transposes a larger matrix
     Failure/Error: expect(arr.my_transpose).to eq([
       
       expected: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:113:in `block (3 levels) in <top (required)>'

  3) Array#median returns the element for an array of length 1
     Failure/Error: expect([1].median).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:145:in `block (3 levels) in <top (required)>'

  4) Array#median returns the median of an odd-length array
     Failure/Error: expect(odd_array.median).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:149:in `block (3 levels) in <top (required)>'

  5) Array#median returns the median of an even-length array
     Failure/Error: expect(even_array.median).to eq(4.5)
       
       expected: 4.5
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:153:in `block (3 levels) in <top (required)>'

  6) String#caesar encodes a simple word
     Failure/Error: expect("aaa".caesar(11)).to eq("lll")
       
       expected: "lll"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:7:in `block (3 levels) in <top (required)>'

  7) String#caesar wraps around
     Failure/Error: expect("zzz".caesar(1)).to eq("aaa")
       
       expected: "aaa"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:11:in `block (3 levels) in <top (required)>'

  8) String#caesar encodes a longer word
     Failure/Error: expect("catzhatz".caesar(2)).to eq("ecvbjcvb")
       
       expected: "ecvbjcvb"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:15:in `block (3 levels) in <top (required)>'

  9) Hash#difference returns the difference of non-overlapping hashes
     Failure/Error: expect(hash.difference(non_overlapping_hash)).to eq({
       
       expected: {:a=>1, :b=>2, :c=>3, :d=>4}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:27:in `block (3 levels) in <top (required)>'

  10) Hash#difference returns the difference of overlapping hashes
     Failure/Error: expect(hash.difference(overlapping_hash)).to eq({
       
       expected: {:a=>1, :c=>3}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:36:in `block (3 levels) in <top (required)>'

  11) Fixnum#stringify stringifies numbers in base 10
     Failure/Error: expect(5.stringify(10)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:57:in `block (3 levels) in <top (required)>'

  12) Fixnum#stringify stringifies numbers in base 2
     Failure/Error: expect(5.stringify(2)).to eq("101")
       
       expected: "101"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:63:in `block (3 levels) in <top (required)>'

  13) Fixnum#stringify stringifies numbers in base 16
     Failure/Error: expect(5.stringify(16)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:69:in `block (3 levels) in <top (required)>'

Finished in 0.02803 seconds (files took 0.49034 seconds to load)
33 examples, 13 failures

Failed examples:

rspec ./spec/00_array_extensions_spec.rb:105 # Array#my_transpose transposes a small matrix
rspec ./spec/00_array_extensions_spec.rb:112 # Array#my_transpose transposes a larger matrix
rspec ./spec/00_array_extensions_spec.rb:144 # Array#median returns the element for an array of length 1
rspec ./spec/00_array_extensions_spec.rb:148 # Array#median returns the median of an odd-length array
rspec ./spec/00_array_extensions_spec.rb:152 # Array#median returns the median of an even-length array
rspec ./spec/01_class_extensions_spec.rb:6 # String#caesar encodes a simple word
rspec ./spec/01_class_extensions_spec.rb:10 # String#caesar wraps around
rspec ./spec/01_class_extensions_spec.rb:14 # String#caesar encodes a longer word
rspec ./spec/01_class_extensions_spec.rb:26 # Hash#difference returns the difference of non-overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:35 # Hash#difference returns the difference of overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:56 # Fixnum#stringify stringifies numbers in base 10
rspec ./spec/01_class_extensions_spec.rb:62 # Fixnum#stringify stringifies numbers in base 2
rspec ./spec/01_class_extensions_spec.rb:68 # Fixnum#stringify stringifies numbers in base 16

Neros-MacBook-Air:appacademy-online-rspec-3-3b381c415b48 nerochan25$ irb
irb(main):001:0> 5/2
=> 2
irb(main):002:0> 5.0/2
=> 2.5
irb(main):003:0> 5.0/2.to_r
=> 2.5
irb(main):004:0> 5.0/2.to_f
=> 2.5
irb(main):005:0> 5.0/2.round
=> 2.5
irb(main):006:0> 5.2.ceil
=> 6
irb(main):007:0> exit
Neros-MacBook-Air:appacademy-online-rspec-3-3b381c415b48 nerochan25$ bundle exec rspec --color
................FF..F.FFFFFFF.FFF

Failures:

  1) Array#my_transpose transposes a small matrix
     Failure/Error: expect(small_arr.my_transpose).to eq([
       
       expected: [[1, 3], [2, 4]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:106:in `block (3 levels) in <top (required)>'

  2) Array#my_transpose transposes a larger matrix
     Failure/Error: expect(arr.my_transpose).to eq([
       
       expected: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:113:in `block (3 levels) in <top (required)>'

  3) Array#median returns nil for the empty array
     Failure/Error: expect([].median).to be_nil
     NoMethodError:
       undefined method `lenth' for []:Array
       Did you mean?  length
     # ./lib/00_array_extensions.rb:92:in `median'
     # ./spec/00_array_extensions_spec.rb:141:in `block (3 levels) in <top (required)>'

  4) Array#median returns the median of an odd-length array
     Failure/Error: expect(odd_array.median).to eq(3)
       
       expected: 3
            got: 6
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:149:in `block (3 levels) in <top (required)>'

  5) Array#median returns the median of an even-length array
     Failure/Error: expect(even_array.median).to eq(4.5)
     NoMethodError:
       undefined method `lenth' for [3, 2, 6, 7]:Array
       Did you mean?  length
     # ./lib/00_array_extensions.rb:92:in `median'
     # ./spec/00_array_extensions_spec.rb:153:in `block (3 levels) in <top (required)>'

  6) String#caesar encodes a simple word
     Failure/Error: expect("aaa".caesar(11)).to eq("lll")
       
       expected: "lll"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:7:in `block (3 levels) in <top (required)>'

  7) String#caesar wraps around
     Failure/Error: expect("zzz".caesar(1)).to eq("aaa")
       
       expected: "aaa"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:11:in `block (3 levels) in <top (required)>'

  8) String#caesar encodes a longer word
     Failure/Error: expect("catzhatz".caesar(2)).to eq("ecvbjcvb")
       
       expected: "ecvbjcvb"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:15:in `block (3 levels) in <top (required)>'

  9) Hash#difference returns the difference of non-overlapping hashes
     Failure/Error: expect(hash.difference(non_overlapping_hash)).to eq({
       
       expected: {:a=>1, :b=>2, :c=>3, :d=>4}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:27:in `block (3 levels) in <top (required)>'

  10) Hash#difference returns the difference of overlapping hashes
     Failure/Error: expect(hash.difference(overlapping_hash)).to eq({
       
       expected: {:a=>1, :c=>3}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:36:in `block (3 levels) in <top (required)>'

  11) Fixnum#stringify stringifies numbers in base 10
     Failure/Error: expect(5.stringify(10)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:57:in `block (3 levels) in <top (required)>'

  12) Fixnum#stringify stringifies numbers in base 2
     Failure/Error: expect(5.stringify(2)).to eq("101")
       
       expected: "101"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:63:in `block (3 levels) in <top (required)>'

  13) Fixnum#stringify stringifies numbers in base 16
     Failure/Error: expect(5.stringify(16)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:69:in `block (3 levels) in <top (required)>'

Finished in 0.02482 seconds (files took 0.19558 seconds to load)
33 examples, 13 failures

Failed examples:

rspec ./spec/00_array_extensions_spec.rb:105 # Array#my_transpose transposes a small matrix
rspec ./spec/00_array_extensions_spec.rb:112 # Array#my_transpose transposes a larger matrix
rspec ./spec/00_array_extensions_spec.rb:140 # Array#median returns nil for the empty array
rspec ./spec/00_array_extensions_spec.rb:148 # Array#median returns the median of an odd-length array
rspec ./spec/00_array_extensions_spec.rb:152 # Array#median returns the median of an even-length array
rspec ./spec/01_class_extensions_spec.rb:6 # String#caesar encodes a simple word
rspec ./spec/01_class_extensions_spec.rb:10 # String#caesar wraps around
rspec ./spec/01_class_extensions_spec.rb:14 # String#caesar encodes a longer word
rspec ./spec/01_class_extensions_spec.rb:26 # Hash#difference returns the difference of non-overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:35 # Hash#difference returns the difference of overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:56 # Fixnum#stringify stringifies numbers in base 10
rspec ./spec/01_class_extensions_spec.rb:62 # Fixnum#stringify stringifies numbers in base 2
rspec ./spec/01_class_extensions_spec.rb:68 # Fixnum#stringify stringifies numbers in base 16

Neros-MacBook-Air:appacademy-online-rspec-3-3b381c415b48 nerochan25$ bundle exec rspec --color
................FF....FFFFFFF.FFF

Failures:

  1) Array#my_transpose transposes a small matrix
     Failure/Error: expect(small_arr.my_transpose).to eq([
       
       expected: [[1, 3], [2, 4]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:106:in `block (3 levels) in <top (required)>'

  2) Array#my_transpose transposes a larger matrix
     Failure/Error: expect(arr.my_transpose).to eq([
       
       expected: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:113:in `block (3 levels) in <top (required)>'

  3) Array#median returns the median of an odd-length array
     Failure/Error: expect(odd_array.median).to eq(3)
       
       expected: 3
            got: 6
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:149:in `block (3 levels) in <top (required)>'

  4) Array#median returns the median of an even-length array
     Failure/Error: expect(even_array.median).to eq(4.5)
     NoMethodError:
       undefined method `lenth' for [3, 2, 6, 7]:Array
       Did you mean?  length
     # ./lib/00_array_extensions.rb:93:in `median'
     # ./spec/00_array_extensions_spec.rb:153:in `block (3 levels) in <top (required)>'

  5) String#caesar encodes a simple word
     Failure/Error: expect("aaa".caesar(11)).to eq("lll")
       
       expected: "lll"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:7:in `block (3 levels) in <top (required)>'

  6) String#caesar wraps around
     Failure/Error: expect("zzz".caesar(1)).to eq("aaa")
       
       expected: "aaa"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:11:in `block (3 levels) in <top (required)>'

  7) String#caesar encodes a longer word
     Failure/Error: expect("catzhatz".caesar(2)).to eq("ecvbjcvb")
       
       expected: "ecvbjcvb"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:15:in `block (3 levels) in <top (required)>'

  8) Hash#difference returns the difference of non-overlapping hashes
     Failure/Error: expect(hash.difference(non_overlapping_hash)).to eq({
       
       expected: {:a=>1, :b=>2, :c=>3, :d=>4}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:27:in `block (3 levels) in <top (required)>'

  9) Hash#difference returns the difference of overlapping hashes
     Failure/Error: expect(hash.difference(overlapping_hash)).to eq({
       
       expected: {:a=>1, :c=>3}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:36:in `block (3 levels) in <top (required)>'

  10) Fixnum#stringify stringifies numbers in base 10
     Failure/Error: expect(5.stringify(10)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:57:in `block (3 levels) in <top (required)>'

  11) Fixnum#stringify stringifies numbers in base 2
     Failure/Error: expect(5.stringify(2)).to eq("101")
       
       expected: "101"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:63:in `block (3 levels) in <top (required)>'

  12) Fixnum#stringify stringifies numbers in base 16
     Failure/Error: expect(5.stringify(16)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:69:in `block (3 levels) in <top (required)>'

Finished in 0.22246 seconds (files took 0.21314 seconds to load)
33 examples, 12 failures

Failed examples:

rspec ./spec/00_array_extensions_spec.rb:105 # Array#my_transpose transposes a small matrix
rspec ./spec/00_array_extensions_spec.rb:112 # Array#my_transpose transposes a larger matrix
rspec ./spec/00_array_extensions_spec.rb:148 # Array#median returns the median of an odd-length array
rspec ./spec/00_array_extensions_spec.rb:152 # Array#median returns the median of an even-length array
rspec ./spec/01_class_extensions_spec.rb:6 # String#caesar encodes a simple word
rspec ./spec/01_class_extensions_spec.rb:10 # String#caesar wraps around
rspec ./spec/01_class_extensions_spec.rb:14 # String#caesar encodes a longer word
rspec ./spec/01_class_extensions_spec.rb:26 # Hash#difference returns the difference of non-overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:35 # Hash#difference returns the difference of overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:56 # Fixnum#stringify stringifies numbers in base 10
rspec ./spec/01_class_extensions_spec.rb:62 # Fixnum#stringify stringifies numbers in base 2
rspec ./spec/01_class_extensions_spec.rb:68 # Fixnum#stringify stringifies numbers in base 16

Neros-MacBook-Air:appacademy-online-rspec-3-3b381c415b48 nerochan25$ irb
irb(main):001:0> [2,3,1,5].sort
=> [1, 2, 3, 5]
irb(main):002:0> exit
Neros-MacBook-Air:appacademy-online-rspec-3-3b381c415b48 nerochan25$ bundle exec rspec --color
................FF.....FFFFFF.FFF

Failures:

  1) Array#my_transpose transposes a small matrix
     Failure/Error: expect(small_arr.my_transpose).to eq([
       
       expected: [[1, 3], [2, 4]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:106:in `block (3 levels) in <top (required)>'

  2) Array#my_transpose transposes a larger matrix
     Failure/Error: expect(arr.my_transpose).to eq([
       
       expected: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:113:in `block (3 levels) in <top (required)>'

  3) Array#median returns the median of an even-length array
     Failure/Error: expect(even_array.median).to eq(4.5)
     NoMethodError:
       undefined method `lenth' for [2, 3, 6, 7]:Array
       Did you mean?  length
     # ./lib/00_array_extensions.rb:94:in `median'
     # ./spec/00_array_extensions_spec.rb:153:in `block (3 levels) in <top (required)>'

  4) String#caesar encodes a simple word
     Failure/Error: expect("aaa".caesar(11)).to eq("lll")
       
       expected: "lll"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:7:in `block (3 levels) in <top (required)>'

  5) String#caesar wraps around
     Failure/Error: expect("zzz".caesar(1)).to eq("aaa")
       
       expected: "aaa"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:11:in `block (3 levels) in <top (required)>'

  6) String#caesar encodes a longer word
     Failure/Error: expect("catzhatz".caesar(2)).to eq("ecvbjcvb")
       
       expected: "ecvbjcvb"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:15:in `block (3 levels) in <top (required)>'

  7) Hash#difference returns the difference of non-overlapping hashes
     Failure/Error: expect(hash.difference(non_overlapping_hash)).to eq({
       
       expected: {:a=>1, :b=>2, :c=>3, :d=>4}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:27:in `block (3 levels) in <top (required)>'

  8) Hash#difference returns the difference of overlapping hashes
     Failure/Error: expect(hash.difference(overlapping_hash)).to eq({
       
       expected: {:a=>1, :c=>3}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:36:in `block (3 levels) in <top (required)>'

  9) Fixnum#stringify stringifies numbers in base 10
     Failure/Error: expect(5.stringify(10)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:57:in `block (3 levels) in <top (required)>'

  10) Fixnum#stringify stringifies numbers in base 2
     Failure/Error: expect(5.stringify(2)).to eq("101")
       
       expected: "101"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:63:in `block (3 levels) in <top (required)>'

  11) Fixnum#stringify stringifies numbers in base 16
     Failure/Error: expect(5.stringify(16)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:69:in `block (3 levels) in <top (required)>'

Finished in 0.02798 seconds (files took 0.18673 seconds to load)
33 examples, 11 failures

Failed examples:

rspec ./spec/00_array_extensions_spec.rb:105 # Array#my_transpose transposes a small matrix
rspec ./spec/00_array_extensions_spec.rb:112 # Array#my_transpose transposes a larger matrix
rspec ./spec/00_array_extensions_spec.rb:152 # Array#median returns the median of an even-length array
rspec ./spec/01_class_extensions_spec.rb:6 # String#caesar encodes a simple word
rspec ./spec/01_class_extensions_spec.rb:10 # String#caesar wraps around
rspec ./spec/01_class_extensions_spec.rb:14 # String#caesar encodes a longer word
rspec ./spec/01_class_extensions_spec.rb:26 # Hash#difference returns the difference of non-overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:35 # Hash#difference returns the difference of overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:56 # Fixnum#stringify stringifies numbers in base 10
rspec ./spec/01_class_extensions_spec.rb:62 # Fixnum#stringify stringifies numbers in base 2
rspec ./spec/01_class_extensions_spec.rb:68 # Fixnum#stringify stringifies numbers in base 16

Neros-MacBook-Air:appacademy-online-rspec-3-3b381c415b48 nerNeros-MacBook-Air:appacademy-online-rspec-3-3b381c415b48 nerochan25$ bundle exec rspec --color
................FF.....FFFFFF.FFF

Failures:

  1) Array#my_transpose transposes a small matrix
     Failure/Error: expect(small_arr.my_transpose).to eq([
       
       expected: [[1, 3], [2, 4]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:106:in `block (3 levels) in <top (required)>'

  2) Array#my_transpose transposes a larger matrix
     Failure/Error: expect(arr.my_transpose).to eq([
       
       expected: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:113:in `block (3 levels) in <top (required)>'

  3) Array#median returns the median of an even-length array
     Failure/Error: expect(even_array.median).to eq(4.5)
     NoMethodError:
       undefined method `lenth' for [2, 3, 6, 7]:Array
       Did you mean?  length
     # ./lib/00_array_extensions.rb:94:in `median'
     # ./spec/00_array_extensions_spec.rb:153:in `block (3 levels) in <top (required)>'

  4) String#caesar encodes a simple word
     Failure/Error: expect("aaa".caesar(11)).to eq("lll")
       
       expected: "lll"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:7:in `block (3 levels) in <top (required)>'

  5) String#caesar wraps around
     Failure/Error: expect("zzz".caesar(1)).to eq("aaa")
       
       expected: "aaa"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:11:in `block (3 levels) in <top (required)>'

  6) String#caesar encodes a longer word
     Failure/Error: expect("catzhatz".caesar(2)).to eq("ecvbjcvb")
       
       expected: "ecvbjcvb"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:15:in `block (3 levels) in <top (required)>'

  7) Hash#difference returns the difference of non-overlapping hashes
     Failure/Error: expect(hash.difference(non_overlapping_hash)).to eq({
       
       expected: {:a=>1, :b=>2, :c=>3, :d=>4}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:27:in `block (3 levels) in <top (required)>'

  8) Hash#difference returns the difference of overlapping hashes
     Failure/Error: expect(hash.difference(overlapping_hash)).to eq({
       
       expected: {:a=>1, :c=>3}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:36:in `block (3 levels) in <top (required)>'

  9) Fixnum#stringify stringifies numbers in base 10
     Failure/Error: expect(5.stringify(10)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:57:in `block (3 levels) in <top (required)>'

  10) Fixnum#stringify stringifies numbers in base 2
     Failure/Error: expect(5.stringify(2)).to eq("101")
       
       expected: "101"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:63:in `block (3 levels) in <top (required)>'

  11) Fixnum#stringify stringifies numbers in base 16
     Failure/Error: expect(5.stringify(16)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:69:in `block (3 levels) in <top (required)>'

Finished in 0.02724 seconds (files took 0.24235 seconds to load)
33 examples, 11 failures

Failed examples:

rspec ./spec/00_array_extensions_spec.rb:105 # Array#my_transpose transposes a small matrix
rspec ./spec/00_array_extensions_spec.rb:112 # Array#my_transpose transposes a larger matrix
rspec ./spec/00_array_extensions_spec.rb:152 # Array#median returns the median of an even-length array
rspec ./spec/01_class_extensions_spec.rb:6 # String#caesar encodes a simple word
rspec ./spec/01_class_extensions_spec.rb:10 # String#caesar wraps around
rspec ./spec/01_class_extensions_spec.rb:14 # String#caesar encodes a longer word
rspec ./spec/01_class_extensions_spec.rb:26 # Hash#difference returns the difference of non-overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:35 # Hash#difference returns the difference of overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:56 # Fixnum#stringify stringifies numbers in base 10
rspec ./spec/01_class_extensions_spec.rb:62 # Fixnum#stringify stringifies numbers in base 2
rspec ./spec/01_class_extensions_spec.rb:68 # Fixnum#stringify stringifies numbers in base 16

Neros-MacBook-Air:appacademy-online-rspec-3-3b381c415b48 nerochan25$ irb
irb(main):001:0> arr = [1,2,3,4]
=> [1, 2, 3, 4]
irb(main):002:0> arr_length = arr.length
=> 4
irb(main):003:0> (arr[arr_length/2-1] + arr[arr_length/2])/2.0
=> 2.5
irb(main):004:0> exit
Neros-MacBook-Air:appacademy-online-rspec-3-3b381c415b48 nerochan25$ bundle exec rspec --color
................FF......FFFFF.FFF

Failures:

  1) Array#my_transpose transposes a small matrix
     Failure/Error: expect(small_arr.my_transpose).to eq([
       
       expected: [[1, 3], [2, 4]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:106:in `block (3 levels) in <top (required)>'

  2) Array#my_transpose transposes a larger matrix
     Failure/Error: expect(arr.my_transpose).to eq([
       
       expected: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
            got: nil
       
       (compared using ==)
     # ./spec/00_array_extensions_spec.rb:113:in `block (3 levels) in <top (required)>'

  3) String#caesar encodes a simple word
     Failure/Error: expect("aaa".caesar(11)).to eq("lll")
       
       expected: "lll"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:7:in `block (3 levels) in <top (required)>'

  4) String#caesar wraps around
     Failure/Error: expect("zzz".caesar(1)).to eq("aaa")
       
       expected: "aaa"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:11:in `block (3 levels) in <top (required)>'

  5) String#caesar encodes a longer word
     Failure/Error: expect("catzhatz".caesar(2)).to eq("ecvbjcvb")
       
       expected: "ecvbjcvb"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:15:in `block (3 levels) in <top (required)>'

  6) Hash#difference returns the difference of non-overlapping hashes
     Failure/Error: expect(hash.difference(non_overlapping_hash)).to eq({
       
       expected: {:a=>1, :b=>2, :c=>3, :d=>4}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:27:in `block (3 levels) in <top (required)>'

  7) Hash#difference returns the difference of overlapping hashes
     Failure/Error: expect(hash.difference(overlapping_hash)).to eq({
       
       expected: {:a=>1, :c=>3}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:36:in `block (3 levels) in <top (required)>'

  8) Fixnum#stringify stringifies numbers in base 10
     Failure/Error: expect(5.stringify(10)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:57:in `block (3 levels) in <top (required)>'

  9) Fixnum#stringify stringifies numbers in base 2
     Failure/Error: expect(5.stringify(2)).to eq("101")
       
       expected: "101"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:63:in `block (3 levels) in <top (required)>'

  10) Fixnum#stringify stringifies numbers in base 16
     Failure/Error: expect(5.stringify(16)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:69:in `block (3 levels) in <top (required)>'

Finished in 0.02818 seconds (files took 0.20047 seconds to load)
33 examples, 10 failures

Failed examples:

rspec ./spec/00_array_extensions_spec.rb:105 # Array#my_transpose transposes a small matrix
rspec ./spec/00_array_extensions_spec.rb:112 # Array#my_transpose transposes a larger matrix
rspec ./spec/01_class_extensions_spec.rb:6 # String#caesar encodes a simple word
rspec ./spec/01_class_extensions_spec.rb:10 # String#caesar wraps around
rspec ./spec/01_class_extensions_spec.rb:14 # String#caesar encodes a longer word
rspec ./spec/01_class_extensions_spec.rb:26 # Hash#difference returns the difference of non-overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:35 # Hash#difference returns the difference of overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:56 # Fixnum#stringify stringifies numbers in base 10
rspec ./spec/01_class_extensions_spec.rb:62 # Fixnum#stringify stringifies numbers in base 2
rspec ./spec/01_class_extensions_spec.rb:68 # Fixnum#stringify stringifies numbers in base 16

Neros-MacBook-Air:appacademy-online-rspec-3-3b381c415b48 nerochan25$ bundle exec rspec --color
........................FFFFF.FFF

Failures:

  1) String#caesar encodes a simple word
     Failure/Error: expect("aaa".caesar(11)).to eq("lll")
       
       expected: "lll"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:7:in `block (3 levels) in <top (required)>'

  2) String#caesar wraps around
     Failure/Error: expect("zzz".caesar(1)).to eq("aaa")
       
       expected: "aaa"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:11:in `block (3 levels) in <top (required)>'

  3) String#caesar encodes a longer word
     Failure/Error: expect("catzhatz".caesar(2)).to eq("ecvbjcvb")
       
       expected: "ecvbjcvb"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:15:in `block (3 levels) in <top (required)>'

  4) Hash#difference returns the difference of non-overlapping hashes
     Failure/Error: expect(hash.difference(non_overlapping_hash)).to eq({
       
       expected: {:a=>1, :b=>2, :c=>3, :d=>4}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:27:in `block (3 levels) in <top (required)>'

  5) Hash#difference returns the difference of overlapping hashes
     Failure/Error: expect(hash.difference(overlapping_hash)).to eq({
       
       expected: {:a=>1, :c=>3}
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:36:in `block (3 levels) in <top (required)>'

  6) Fixnum#stringify stringifies numbers in base 10
     Failure/Error: expect(5.stringify(10)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:57:in `block (3 levels) in <top (required)>'

  7) Fixnum#stringify stringifies numbers in base 2
     Failure/Error: expect(5.stringify(2)).to eq("101")
       
       expected: "101"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:63:in `block (3 levels) in <top (required)>'

  8) Fixnum#stringify stringifies numbers in base 16
     Failure/Error: expect(5.stringify(16)).to eq("5")
       
       expected: "5"
            got: nil
       
       (compared using ==)
     # ./spec/01_class_extensions_spec.rb:69:in `block (3 levels) in <top (required)>'

Finished in 0.03195 seconds (files took 0.28107 seconds to load)
33 examples, 8 failures

Failed examples:

rspec ./spec/01_class_extensions_spec.rb:6 # String#caesar encodes a simple word
rspec ./spec/01_class_extensions_spec.rb:10 # String#caesar wraps around
rspec ./spec/01_class_extensions_spec.rb:14 # String#caesar encodes a longer word
rspec ./spec/01_class_extensions_spec.rb:26 # Hash#difference returns the difference of non-overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:35 # Hash#difference returns the difference of overlapping hashes
rspec ./spec/01_class_extensions_spec.rb:56 # Fixnum#stringify stringifies numbers in base 10
rspec ./spec/01_class_extensions_spec.rb:62 # Fixnum#stringify stringifies numbers in base 2
rspec ./spec/01_class_extensions_spec.rb:68 # Fixnum#stringify stringifies numbers in base 16
Neros-MacBook-Air:appacademy-online-rspec-3-3b381c415b48 nerochan25$ 

